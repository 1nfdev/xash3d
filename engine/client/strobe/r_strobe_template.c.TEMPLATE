/*
r_strobe_template.c - Software based strobing implementation

Copyright (C) 2018 - fuzun * github/fuzun

For information:
	https://forums.blurbusters.com/viewtopic.php?f=7&t=3815&p=30401

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.
*/


#if !defined XASH_DEDICATED && !defined STROBE_DISABLED

#include "r_strobe_template.h"
#include "r_strobe_api_protected_.h"
#include "client.h"
#include "gl_local.h"

#ifdef _this
#undef _this
#endif
#define _this STROBE_IMPL_THIS(STROBE_TEMPLATE)

STROBE_IMPL_STRUCT_T(STROBE_TEMPLATE) *STROBE_TEMPLATE = NULL;

typedef struct STROBE_IMPL_PRIVATE_S(STROBE_TEMPLATE)
{
	// Private members
} STROBE_IMPL_PRIVATE_T(STROBE_TEMPLATE);

static void main( STROBE_IMPL_THIS_PARAM( STROBE_TEMPLATE ) )
{
	_this->base.protected->frameInfo = ( p_positive | f_normal );
	_this->base.ProcessFrame( &_this->base );
}

static void debugHandler( STROBE_IMPL_THIS_PARAM( STROBE_TEMPLATE ) )
{
	char debugstr[2048] = {0};
	_this->base.Helpers.GenerateDebugStatistics( &_this->base, debugstr, 2048 );
}

void STROBE_IMPL_EXPORTEDFUNC_constructor(STROBE_TEMPLATE)( void **STROBE_TEMPLATE )
{
	STROBE_IMPL_STRUCT_T(STROBE_TEMPLATE) **instance = *(STROBE_IMPL_STRUCT_T(STROBE_TEMPLATE) ***)&STROBE_TEMPLATE;

	*instance                                    = (STROBE_IMPL_STRUCT_T(STROBE_TEMPLATE) *)malloc( sizeof( STROBE_IMPL_STRUCT_T(STROBE_TEMPLATE) ) );
	( *instance )->private                       = (STROBE_IMPL_PRIVATE_T(STROBE_TEMPLATE) *)calloc( 1, sizeof( STROBE_IMPL_PRIVATE_T(STROBE_TEMPLATE) ) );
	( *instance )->STROBE_IMPL_FUNC_MAIN = R_Strobe;
	( *instance )->STROBE_IMPL_FUNC_DEBUGHANDLER = debugDrawer;

	StrobeAPI.Constructor( &( *instance )->base );
}

void STROBE_IMPL_EXPORTEDFUNC_destructor(STROBE_TEMPLATE)( void **STROBE_TEMPLATE )
{
	STROBE_IMPL_STRUCT_T(STROBE_TEMPLATE) **instance = *(STROBE_IMPL_STRUCT_T(STROBE_TEMPLATE) ***)&STROBE_TEMPLATE;

	if ( *instance )
	{
		StrobeAPI.Destructor( &( *instance )->base );
		if ( ( *instance )->private )
		{
			free( ( *instance )->private );
			( *instance )->private = NULL;
		}
		free( *instance );
		*instance = NULL;
	}
}

void STROBE_IMPL_EXPORTEDFUNC_reinit(STROBE_TEMPLATE)( void **STROBE_TEMPLATE )
{
	if ( !( *STROBE_TEMPLATE ) )
	{
		STROBE_IMPL_EXPORTEDFUNC_destructor(STROBE_TEMPLATE)( STROBE_TEMPLATE );
	}
	STROBE_IMPL_EXPORTEDFUNC_constructor(STROBE_TEMPLATE)( STROBE_TEMPLATE );
}

void STROBE_IMPL_EXPORTEDFUNC_main(STROBE_TEMPLATE)( void **STROBE_TEMPLATE )
{
	STROBE_IMPL_STRUCT_T(STROBE_TEMPLATE) **instance = *(STROBE_IMPL_STRUCT_T(STROBE_TEMPLATE) ***)&STROBE_TEMPLATE;
	if ( *instance )
	{
		( *instance )->STROBE_IMPL_FUNC_MAIN( instance );
	}
}


#undef _this

#endif